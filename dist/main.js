function testApp () {} function originEdit (e) {} function doGet (e) {} function doPost (e) {}(() => { 'use strict'; var e = { d: (t, o) => { for (const s in o)e.o(o, s) && !e.o(t, s) && Object.defineProperty(t, s, { enumerable: !0, get: o[s] }) } }; e.g = (function () { if (typeof globalThis === 'object') return globalThis; try { return this || new Function('return this')() } catch (e) { if (typeof window === 'object') return window } }()), e.o = (e, t) => Object.prototype.hasOwnProperty.call(e, t), e.r = e => { typeof Symbol !== 'undefined' && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, { value: 'Module' }), Object.defineProperty(e, '__esModule', { value: !0 }) }; const t = {}; e.r(t), e.d(t, { gA: () => o, sK: () => s, rd: () => i, kv: () => a, kH: () => r, wA: () => n }); const o = ''; const s = 'https://docs.google.com/spreadsheets/d/1FbBBgh6SXu11JaeQUHDcQWS6jD1FA0nS5QLwDFKRpn8/edit'; const n = 'test'; const i = 1; const a = 2; const r = 26; class h {constructor (e, t) { this.book = SpreadsheetApp.openByUrl(e), this.sheetName = t, this.sheet = this.book.getSheetByName(t) }doGetLastRow (e, t) { if (!e && !t) return; return this.sheet.getRange(e, t).getNextDataCell(SpreadsheetApp.Direction.DOWN).getRow() }doGetLastCol (e, t) { if (!e || !t) return; return this.sheet.getRange(e, t).getNextDataCell(SpreadsheetApp.Direction.NEXT).getColumn() }doWriteSS (e, t, o) { if (!t || !o) return; e || (e = ''); this.sheet.getRange(t, o).setValue(e) }doReadSSVerString (e) { let t = null; if (!e) return t; return t = this.sheet.getRange(e).getValues(), t }doReadSS (e, t, o, s) { let n = null; const i = this.getAdditionRange(e, t, o, s); const a = this.sheet; return e && t ? o || s ? (n = a.getRange(e, t, i.rows, i.colums).getValues(), n) : (n = a.getRange(e, t, i.rows, i.colums).getValues(), n[0][0]) : n }getAdditionRange (e, t, o, s) { const n = { rows: 1, colums: 1 }; return o && (n.rows = o - e + 1), s && (n.colums = s - t + 1), n }copySheet (e) { if (!e) return; const t = this.book; this.sheet.copyTo(t).setName(e) }setPullDown (e, t, o, s) { const n = this.sheet.getRange(e, t); const i = SpreadsheetApp.newDataValidation().requireValueInList(o).build(); if (n.setDataValidation(i), s) { o.find(e => e === s) && n.setValue(s) } }delRow (e, t, o, s) { const n = this.getAdditionRange(e, t, o, s); this.sheet.getRange(e, t, n.rows, n.colums).deleteCells(SpreadsheetApp.Dimension.ROWS) }changeCellBackGroundColor (e, t, o, s, n) { const i = this.getAdditionRange(t, o, s, n); this.sheet.getRange(t, o, i.rows, i.colums).setBackground(e) }changeCellBackGroundColorVerString (e, t) { if (!t) return null; this.sheet.getRange(t).setBackground(e) }} class l {constructor (e) { this.gasApp = e, this.redColorRanges = [], this.yellowColorRanges = [], this.blueColorRanges = [], this.lastRow = this.gasApp.doGetLastRow(1, i), this.lastCol = this.gasApp.doGetLastCol(1, r), this.ssData = this.getAllData() }getAllData () { return this.gasApp.doReadSS(1, i, this.lastRow, this.lastCol) }changeColor () { this.yellowColorRanges.forEach(e => { this.gasApp.changeCellBackGroundColor('#f1d553', e.row, e.col) }), this.redColorRanges.forEach(e => { this.gasApp.changeCellBackGroundColor('#e14e30', e.row, e.col) }), this.blueColorRanges.forEach(e => { this.gasApp.changeCellBackGroundColor('#5a86ea', e.row, e.col) }) }doing () { this.yellowColorRanges.push({ row: 1, col: a }), this.yellowColorRanges.push({ row: 2, col: a }), this.yellowColorRanges.push({ row: 3, col: a }), this.changeColor() }} class g {constructor (e, t, o) { this.app = e, this.event = t, this.range = this.event.range, this.value = this.event.value, this.oldValue = this.event.oldValue, this.nowSheetName = o, this.sheetBranch(o) }sheetBranch (e) { if (e === t.SHEET_FUNCTION_LIST) this.eventSheet() }eventSheet () { if (this.range.columnStart === i) this.app.checkCallFunction(this.range.rowStart); this.range.rowStart }} const c = new class {constructor () { this.running = !1 }init () { !0 !== this.running && (this.running = !0) }fix () { this.running = !1 }test () { this.init(); const e = new h(s, n); new l(e).doing(), this.fix() }}(); e.g.testApp = function () { c.test() }, e.g.originEdit = function (e) { const t = SpreadsheetApp.getActiveSpreadsheet().getName(); const s = SpreadsheetApp.getActiveSpreadsheet().getSheetName(); if (t === o) new g(c, e, s) }, e.g.doGet = function (e) { SpreadsheetApp.getActive().getActiveSheet().appendRow([new Date(), e.postData.contents]) }, e.g.doPost = function (e) { SpreadsheetApp.getActive().getActiveSheet().appendRow([new Date(), e.postData.contents]) } })()
